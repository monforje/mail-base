import React, { useState } from "react";
import { ReportData } from "../../data-structures/ReportsArray";
import { ReportsService } from "../../services/ReportsService";
import { User, Package } from "../../types";
import { usersService, packagesService } from "../../DataServices";
import ReportsModal from "./ReportsModal";
import ReportsTable from "./ReportsTable";
import "../../assets/Modal.css";

interface ReportsSectionProps {
  users: User[];
  packages: Package[];
  reportData: ReportData[];
  setReportData: React.Dispatch<React.SetStateAction<ReportData[]>>;
  reportStatistics: {
    totalReports: number;
    uniqueDates: number;
    totalWeight: number;
    averageWeight: number;
  } | null;
  setReportStatistics: React.Dispatch<
    React.SetStateAction<{
      totalReports: number;
      uniqueDates: number;
      totalWeight: number;
      averageWeight: number;
    } | null>
  >;
  reportIsLoading: boolean;
  setReportIsLoading: React.Dispatch<React.SetStateAction<boolean>>;
}

const ReportsSection: React.FC<ReportsSectionProps> = ({
  users,
  packages,
  reportData,
  setReportData,
  reportStatistics,
  setReportStatistics,
  reportIsLoading,
  setReportIsLoading,
}) => {
  const [reportsService] = useState(new ReportsService());
  const [isModalOpen, setIsModalOpen] = useState(false);

  const handleOpenModal = () => {
    const allPackages = packagesService.getAllPackages();
    const allUsers = usersService.getAllUsers();
    
    if (allPackages.length === 0) {
      alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—ã–ª–∫–∞—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞");
      return;
    }
    if (allUsers.length === 0) {
      alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞");
      return;
    }
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  const handleGenerateReport = async (
    startDate?: string, 
    endDate?: string, 
    receiverPhone?: string, 
    address?: string
  ) => {
    setReportIsLoading(true);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
      const allUsers = usersService.getAllUsers();
      const allPackages = packagesService.getAllPackages();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
      reportsService.generateReport(allUsers, allPackages);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const filteredReports = reportsService.getReportsByFilters(
        startDate,
        endDate,
        receiverPhone,
        address
      );

      setReportData(filteredReports);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const totalWeight = filteredReports.reduce(
        (sum, report) => sum + report.weight,
        0
      );
      const uniqueDates = new Set(filteredReports.map((report) => report.date))
        .size;

      setReportStatistics({
        totalReports: filteredReports.length,
        uniqueDates,
        totalWeight,
        averageWeight:
          filteredReports.length > 0 ? totalWeight / filteredReports.length : 0,
      });

      if (filteredReports.length === 0) {
        let message = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.";
        if (startDate && endDate) {
          message += ` –ü–µ—Ä–∏–æ–¥: ${startDate} - ${endDate}`;
        }
        if (receiverPhone) {
          message += ` –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${receiverPhone}`;
        }
        if (address) {
          message += ` –ê–¥—Ä–µ—Å: ${address}`;
        }
        alert(message);
      }
    } catch (error) {
      console.error("Error generating report:", error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: ${error}`);
    } finally {
      setReportIsLoading(false);
    }
  };

  const handleExportReport = () => {
    if (reportData.length === 0) {
      alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç.");
      return;
    }

    try {
      const exportData = reportsService.exportToText(reportData);
      const blob = new Blob([exportData], {
        type: "text/plain; charset=utf-8",
      });
      const url = URL.createObjectURL(blob);

      const a = document.createElement("a");
      a.href = url;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
      const now = new Date();
      const dateStr = now.toISOString().split("T")[0];
      a.download = `report_packages_${dateStr}.txt`;

      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      console.log("Report exported successfully");
    } catch (error) {
      console.error("Error exporting report:", error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞: ${error}`);
    }
  };

  const handleClearReport = () => {
    if (reportData.length === 0) {
      alert("–û—Ç—á–µ—Ç —É–∂–µ –ø—É—Å—Ç");
      return;
    }

    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç?")) {
      setReportData([]);
      setReportStatistics(null);
      reportsService.clear();
      console.log("Report cleared");
    }
  };

  const getSectionTitle = () => {
    if (reportStatistics) {
      return `–û—Ç—á—ë—Ç "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ—Å—ã–ª–∫–∞–º" (${reportStatistics.totalReports} –∑–∞–ø–∏—Å–µ–π, ${reportStatistics.uniqueDates} –¥–∞—Ç)`;
    }
    return '–û—Ç—á—ë—Ç "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ—Å—ã–ª–∫–∞–º"';
  };

  const getAvailableDates = () => {
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ –∫—Ä–∞—Å–Ω–æ-—á–µ—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ—Å—ã–ª–æ–∫
    const allPackages = packagesService.getAllPackages();
    const dates = Array.from(new Set(allPackages.map((pkg) => pkg.date))).sort();
    return dates;
  };

  const getDateRange = () => {
    const dates = getAvailableDates();
    if (dates.length === 0) return null;

    return {
      startDate: dates[0],
      endDate: dates[dates.length - 1],
    };
  };

  const getAvailablePhones = () => {
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ –∫—Ä–∞—Å–Ω–æ-—á–µ—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ—Å—ã–ª–æ–∫
    const allPackages = packagesService.getAllPackages();
    const phones = Array.from(new Set(allPackages.map((pkg) => pkg.receiverPhone.toString()))).sort();
    return phones;
  };

  const getAvailableAddresses = () => {
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = usersService.getAllUsers();
    const addresses = Array.from(new Set(allUsers.map((user) => user.address))).sort();
    return addresses;
  };

  return (
    <>
      <div
        style={{
          height: "100%",
          display: "flex",
          flexDirection: "column",
          border: "1px solid #ccc",
        }}
      >
        <div className="section-header">
          <div className="section-title">{getSectionTitle()}</div>
          <div className="section-actions">
            <button
              className="action-icon"
              onClick={handleOpenModal}
              title="–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"
              disabled={reportIsLoading}
            >
              üìä
            </button>
            <button
              className="action-icon"
              onClick={handleExportReport}
              title="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"
              disabled={reportIsLoading || reportData.length === 0}
            >
              üíæ
            </button>
            <button
              className="action-icon"
              onClick={handleClearReport}
              title="–û—á–∏—Å—Ç–∏—Ç—å –æ—Ç—á–µ—Ç"
              disabled={reportIsLoading || reportData.length === 0}
            >
              üóëÔ∏è
            </button>
          </div>
        </div>

        <div
          style={{
            flex: 1,
            overflow: "auto",
            minHeight: 0,
          }}
        >
          {reportIsLoading ? (
            <div
              style={{
                padding: "40px 20px",
                textAlign: "center",
                color: "#666",
                fontSize: "16px",
              }}
            >
              <div style={{ marginBottom: "12px" }}>
                ‚è≥ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...
              </div>
              <div style={{ fontSize: "14px" }}>
                –û–±—Ä–∞–±–æ—Ç–∫–∞ {packages.length} –ø–æ—Å—ã–ª–æ–∫ –∏ {users.length}{" "}
                –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
              </div>
            </div>
          ) : (
            <>
              {reportStatistics && (
                <div
                  style={{
                    borderBottom: "1px solid #eee",
                    backgroundColor: "#fafafa",
                    fontSize: "12px",
                    padding: "8px 12px",
                    display: "flex",
                    gap: "20px",
                    flexWrap: "wrap",
                  }}
                >
                  <span style={{ color: "#4caf50" }}>
                    üìã –ó–∞–ø–∏—Å–µ–π: {reportStatistics.totalReports}
                  </span>
                  <span style={{ color: "#2196f3" }}>
                    üìÖ –î–∞—Ç: {reportStatistics.uniqueDates}
                  </span>
                  <span style={{ color: "#ff9800" }}>
                    ‚öñÔ∏è –û–±—â–∏–π –≤–µ—Å: {reportStatistics.totalWeight.toFixed(2)} –∫–≥
                  </span>
                  <span style={{ color: "#9c27b0" }}>
                    üìä –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {reportStatistics.averageWeight.toFixed(2)}{" "}
                    –∫–≥
                  </span>
                </div>
              )}
              <ReportsTable reports={reportData} />
            </>
          )}
        </div>
      </div>

      <ReportsModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onGenerate={handleGenerateReport}
        availableDates={getAvailableDates()}
        dateRange={getDateRange()}
        availablePhones={getAvailablePhones()}
        availableAddresses={getAvailableAddresses()}
      />
    </>
  );
};

export default ReportsSection;
