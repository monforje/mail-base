import React, { useState, useMemo } from "react";
import { User, Package } from "../../types";
import { ReportsService } from "../../services/ReportsService";
import RBTreeCanvas, { convertRBTreeToVisualTree } from "../PackagesSection/RBTreeCanvas";
import { DoublyLinkedList } from "../../data-structures/DoublyLinkedList";

interface ReportsTreeViewProps {
  users: User[];
  packages: Package[];
}

const ReportsTreeView: React.FC<ReportsTreeViewProps> = ({ users, packages }) => {
  const [reportsService] = useState(() => new ReportsService());
  const [selectedDate, setSelectedDate] = useState<string | null>(null);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤–∞
  const { treeData, stats } = useMemo(() => {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      reportsService.generateReport(users, packages);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –¥–µ—Ä–µ–≤–æ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
      const tree = (reportsService as any).dateTree;
      
      if (!tree || packages.length === 0) {
        return { treeData: null, stats: null };
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
      const visualTree = convertRBTreeToVisualTree(tree, (date, value) => {
        // date - —ç—Ç–æ –¥–∞—Ç–∞
        // value - —ç—Ç–æ DoublyLinkedList —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
        const reportCount = value ? (value as DoublyLinkedList<any>).getSize() : 0;
        return `${date}\n(${reportCount} –æ—Ç—á–µ—Ç–æ–≤)`;
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const treeStats = reportsService.getTreeStatistics();
      const generalStats = reportsService.getStatistics();

      return { 
        treeData: visualTree, 
        stats: { ...treeStats, ...generalStats }
      };
    } catch (error) {
      console.error('Error generating reports tree:', error);
      return { treeData: null, stats: null };
    }
  }, [users, packages, reportsService]);

  const uniqueDates = useMemo(() => {
    return Array.from(new Set(packages.map(pkg => pkg.date))).sort();
  }, [packages]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É–∑–ª—É –¥–µ—Ä–µ–≤–∞
  const handleNodeClick = (nodeKey: string) => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∫–ª—é—á–∞ —É–∑–ª–∞ (–¥–æ —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏)
    const date = nodeKey.split('\n')[0];
    setSelectedDate(date);
  };

  return (
    <div style={{
      height: "100%",
      display: "flex",
      flexDirection: "column",
      border: "1px solid #ccc"
    }}>
      <div className="section-header">
        <div className="section-title">
          –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ –æ—Ç—á–µ—Ç–æ–≤ ({uniqueDates.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç)
        </div>
        <div className="section-actions">
          <button
            className="action-icon"
            title="–û–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"
            onClick={() => {
              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
              setSelectedDate(null);
            }}
          >
            üîÑ
          </button>
          <button
            className="action-icon"
            title="–°–±—Ä–æ—Å–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ"
            onClick={() => setSelectedDate(null)}
          >
            ‚öôÔ∏è
          </button>
        </div>
      </div>

      {stats && (
        <div style={{
          padding: "12px",
          backgroundColor: "#f9f9f9",
          borderBottom: "1px solid #ddd",
          fontSize: "12px",
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center"
        }}>
          <div style={{ display: "flex", gap: "20px" }}>
            <span style={{ color: "#4caf50" }}>
              üìã –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {stats.totalReports}
            </span>
            <span style={{ color: "#2196f3" }}>
              üìÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {stats.uniqueDates}
            </span>
            <span style={{ color: "#ff9800" }}>
              üìè –í—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞: {stats.height}
            </span>
            <span style={{ color: "#9c27b0" }}>
              ‚ö´ –ß–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞: {stats.blackHeight}
            </span>
          </div>
          <div style={{ display: "flex", gap: "15px" }}>
            <span style={{ 
              color: stats.isValid ? "#4caf50" : "#f44336",
              fontWeight: "bold"
            }}>
              {stats.isValid ? "‚úì –î–µ—Ä–µ–≤–æ –≤–∞–ª–∏–¥–Ω–æ–µ" : "‚úó –î–µ—Ä–µ–≤–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ"}
            </span>
            <span style={{ color: "#666" }}>
              üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(stats.efficiency * 100).toFixed(1)}%
            </span>
          </div>
        </div>
      )}

      {/* –õ–µ–≥–µ–Ω–¥–∞ */}
      <div style={{
        padding: "8px 12px",
        backgroundColor: "#fafafa",
        borderBottom: "1px solid #eee",
        fontSize: "11px",
        display: "flex",
        gap: "20px",
        alignItems: "center"
      }}>
        <span style={{ color: "#333", fontWeight: "bold" }}>–õ–µ–≥–µ–Ω–¥–∞:</span>
        <div style={{ display: "flex", alignItems: "center", gap: "4px" }}>
          <div style={{
            width: "16px",
            height: "16px",
            borderRadius: "50%",
            backgroundColor: "#ff4444",
            border: "1px solid #222"
          }}></div>
          <span>–ö—Ä–∞—Å–Ω—ã–π —É–∑–µ–ª</span>
        </div>
        <div style={{ display: "flex", alignItems: "center", gap: "4px" }}>
          <div style={{
            width: "16px",
            height: "16px",
            borderRadius: "50%",
            backgroundColor: "#333333",
            border: "1px solid #222"
          }}></div>
          <span>–ß–µ—Ä–Ω—ã–π —É–∑–µ–ª</span>
        </div>
        <div style={{ display: "flex", alignItems: "center", gap: "4px" }}>
          <div style={{
            width: "16px",
            height: "16px",
            borderRadius: "50%",
            backgroundColor: "#2196f3",
            border: "1px solid #1976d2"
          }}></div>
          <span>–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞</span>
        </div>
        <span style={{ marginLeft: "20px", color: "#666" }}>
          –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —É–∑–µ–ª –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã
        </span>
      </div>

      <div style={{
        flex: 1,
        overflow: "auto",
        minHeight: 0,
        backgroundColor: "#fafafa"
      }}>
        {!treeData ? (
          <div style={{
            padding: "40px 20px",
            textAlign: "center",
            color: "#666",
            height: "100%",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center"
          }}>
            <div style={{ 
              fontSize: "48px", 
              marginBottom: "24px",
              opacity: 0.3
            }}>
              üå≥
            </div>
            
            <div style={{ 
              fontSize: "24px", 
              marginBottom: "16px",
              fontWeight: "bold"
            }}>
              –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞
            </div>
            
            <div style={{ 
              fontSize: "16px", 
              marginBottom: "24px",
              maxWidth: "600px",
              lineHeight: "1.5"
            }}>
              –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π 
              –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–∞—Å–Ω–æ-—á–µ—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º.
            </div>

            {uniqueDates.length > 0 && (
              <div style={{
                backgroundColor: "white",
                border: "1px solid #ddd",
                borderRadius: "8px",
                padding: "20px",
                maxWidth: "500px",
                width: "100%"
              }}>
                <div style={{ 
                  fontSize: "14px", 
                  fontWeight: "bold",
                  marginBottom: "12px",
                  color: "#333"
                }}>
                  –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
                </div>
                
                <div style={{ 
                  display: "grid",
                  gridTemplateColumns: "1fr 1fr",
                  gap: "12px",
                  fontSize: "14px"
                }}>
                  <div style={{ display: "flex", justifyContent: "space-between" }}>
                    <span>üìÖ –î–∞—Ç –≤ –¥–∞–Ω–Ω—ã—Ö:</span>
                    <strong>{uniqueDates.length}</strong>
                  </div>
                  
                  <div style={{ display: "flex", justifyContent: "space-between" }}>
                    <span>üì¶ –í—Å–µ–≥–æ –ø–æ—Å—ã–ª–æ–∫:</span>
                    <strong>{packages.length}</strong>
                  </div>
                  
                  <div style={{ display: "flex", justifyContent: "space-between" }}>
                    <span>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</span>
                    <strong>{users.length}</strong>
                  </div>
                  
                  <div style={{ display: "flex", justifyContent: "space-between" }}>
                    <span>üìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –¥–∞—Ç—É:</span>
                    <strong>{uniqueDates.length > 0 ? (packages.length / uniqueDates.length).toFixed(1) : 0}</strong>
                  </div>
                </div>

                <div style={{ 
                  marginTop: "16px",
                  fontSize: "12px",
                  color: "#f44336",
                  textAlign: "center"
                }}>
                  ‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                </div>
              </div>
            )}
          </div>
        ) : (
          <div style={{
            padding: "20px",
            display: "flex",
            justifyContent: "center",
            alignItems: "flex-start",
            minHeight: "100%"
          }}>
            <RBTreeCanvas
              treeData={treeData}
              selectedKey={selectedDate ? `${selectedDate}\n` : null}
              width={Math.max(800, window.innerWidth - 100)}
              height={Math.max(600, window.innerHeight - 250)}
              onNodeClick={handleNodeClick}
            />
          </div>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ */}
      {selectedDate && (
        <div style={{
          padding: "12px",
          backgroundColor: "#e3f2fd",
          borderTop: "1px solid #bbdefb",
          fontSize: "12px",
          color: "#1565c0"
        }}>
          <strong>–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {selectedDate}</strong>
          {stats && (
            <span style={{ marginLeft: "20px" }}>
              –û—Ç—á–µ—Ç–æ–≤ –∑–∞ —ç—Ç—É –¥–∞—Ç—É: {
                reportsService.getReportsByDate(selectedDate).length
              }
            </span>
          )}
        </div>
      )}

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
      <div style={{
        padding: "8px 12px",
        backgroundColor: "#f0f0f0",
        borderTop: "1px solid #ddd",
        fontSize: "11px",
        color: "#666"
      }}>
        <div style={{ display: "flex", justifyContent: "space-between" }}>
          <span>
            <strong>–°—Ç—Ä—É–∫—Ç—É—Ä–∞:</strong> –ö–ª—é—á = –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ó–Ω–∞—á–µ–Ω–∏–µ = —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
          </span>
          <span>
            <strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</strong> –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —É–∑–µ–ª –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
          </span>
        </div>
      </div>
    </div>
  );
};

export default ReportsTreeView;