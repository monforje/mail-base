// src/renderer/src/components/UsersSection/HashTableStructureView.tsx
import React from "react";
import { User } from "../../types";
import { usersService } from "../../DataServices";

interface HashTableStructureViewProps {
  users: User[];
}

interface HashTableEntry {
  index: number;
  key: string;
  value: User | null;
  status: "empty" | "occupied" | "deleted";
  hashValue?: number;
}

const HashTableStructureView: React.FC<HashTableStructureViewProps> = () => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã
  const isInitialized = usersService.isInitialized();
  const stats = usersService.getStatistics();

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã
  const getHashTableStructure = (): HashTableEntry[] => {
    if (!isInitialized) {
      return [];
    }
    return usersService.getHashTableEntries();
  };

  const hashTableEntries = getHashTableStructure();

  const getStatusText = (status: string): string => {
    switch (status) {
      case "empty":
        return "–ü—É—Å—Ç–æ";
      case "occupied":
        return "–ó–∞–Ω—è—Ç–æ";
      case "deleted":
        return "–£–¥–∞–ª–µ–Ω–æ";
      default:
        return "‚Äî";
    }
  };

  const getStatusColor = (status: string): string => {
    switch (status) {
      case "empty":
        return "#f8f8f8";
      case "occupied":
        return "#e8f5e8";
      case "deleted":
        return "#ffebee";
      default:
        return "#ffffff";
    }
  };

  const getStatusBadgeColor = (status: string): string => {
    switch (status) {
      case "empty":
        return "#999";
      case "occupied":
        return "#4caf50";
      case "deleted":
        return "#f44336";
      default:
        return "#999";
    }
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  if (!isInitialized) {
    return (
      <div className="hashtable-structure-view" style={{ width: "100%", height: "100%", overflow: "auto" }}>
        <div
          style={{
            padding: "40px 20px",
            textAlign: "center",
            color: "#666",
            fontStyle: "italic",
          }}
        >
          <div style={{ fontSize: "16px", marginBottom: "12px" }}>
            üîß –•–µ—à-—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
          </div>
          <div style={{ fontSize: "14px" }}>
            –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="hashtable-structure-view" style={{ width: "100%", height: "100%", overflow: "auto" }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü–µ */}
      <div
        style={{
          borderBottom: "1px solid #ccc",
          backgroundColor: "#f9f9f9",
          fontSize: "12px",
          padding: "8px 12px",
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
        }}
      >
        <span>
          <strong>–•–µ—à-—Ç–∞–±–ª–∏—Ü–∞:</strong> {stats.capacity} —è—á–µ–µ–∫, {stats.size} –∑–∞–ø–∏—Å–µ–π
        </span>
        <span style={{ color: "#666" }}>
          –ó–∞–≥—Ä—É–∑–∫–∞: {(stats.loadFactor * 100).toFixed(1)}% | 
          –ú–µ—Ç–æ–¥ —Å–µ—Ä–µ–¥–∏–Ω–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ + –ª–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–±–∏–Ω–≥
        </span>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div
        style={{
          borderBottom: "1px solid #eee",
          backgroundColor: "#fafafa",
          fontSize: "11px",
          padding: "6px 12px",
          display: "flex",
          gap: "20px",
        }}
      >
        <span style={{ color: "#4caf50" }}>
          ‚úì –ó–∞–Ω—è—Ç–æ: {stats.distribution.occupiedSlots}
        </span>
        <span style={{ color: "#999" }}>
          ‚óã –ü—É—Å—Ç–æ: {stats.distribution.emptySlots}
        </span>
        <span style={{ color: "#f44336" }}>
          ‚úó –£–¥–∞–ª–µ–Ω–æ: {stats.distribution.deletedSlots}
        </span>
        <span style={{ color: "#666", marginLeft: "auto" }}>
          –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {(stats.loadFactor * 100).toFixed(1)}%
        </span>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã */}
      <table className="data-table" style={{ fontSize: "11px" }}>
        <thead>
          <tr>
            <th style={{ width: "60px", textAlign: "center" }}>–ò–Ω–¥–µ–∫—Å –•–¢</th>
            <th style={{ width: "100px" }}>–°—Ç–∞—Ç—É—Å</th>
            <th style={{ width: "140px" }}>–ö–ª—é—á (–¢–µ–ª–µ—Ñ–æ–Ω)</th>
            <th style={{ width: "80px", textAlign: "center" }}>–•–µ—à</th>
            <th style={{ width: "80px", textAlign: "center" }}>–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞</th>
            <th style={{ width: "180px" }}>–§–ò–û</th>
            <th>–ê–¥—Ä–µ—Å</th>
          </tr>
        </thead>
        <tbody>
          {hashTableEntries.map((entry, idx) => {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫
            let arrayIndex: number | null = null;
            if (entry.status === "occupied" && entry.key) {
              // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API
              const phoneKey = entry.key;
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ any –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
              try {
                const hashTable = (usersService as any).hashTable;
                if (hashTable && hashTable.get) {
                  const result = hashTable.get(phoneKey);
                  arrayIndex = typeof result === 'number' ? result : null;
                }
              } catch (e) {
                // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å—Ä–µ–¥–∏ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫
                const occupiedEntries = hashTableEntries.filter(e => e.status === "occupied");
                const currentOccupiedIndex = occupiedEntries.findIndex(e => e.key === entry.key);
                arrayIndex = currentOccupiedIndex >= 0 ? currentOccupiedIndex : null;
              }
            }

            return (
              <tr
                key={idx}
                style={{
                  backgroundColor: getStatusColor(entry.status),
                  borderLeft: `3px solid ${getStatusBadgeColor(entry.status)}`,
                }}
              >
                <td style={{ textAlign: "center", fontWeight: "bold", fontFamily: "monospace" }}>
                  {entry.index}
                </td>
                <td>
                  <span
                    style={{
                      display: "inline-block",
                      padding: "2px 6px",
                      borderRadius: "3px",
                      fontSize: "10px",
                      fontWeight: "bold",
                      color: "white",
                      backgroundColor: getStatusBadgeColor(entry.status),
                    }}
                  >
                    {getStatusText(entry.status)}
                  </span>
                </td>
                <td style={{ fontFamily: "monospace" }}>
                  {entry.key || "‚Äî"}
                </td>
                <td style={{ textAlign: "center", fontFamily: "monospace" }}>
                  {entry.hashValue !== undefined ? entry.hashValue : "‚Äî"}
                </td>
                <td style={{ textAlign: "center", fontFamily: "monospace", fontWeight: "bold" }}>
                  {entry.status === "occupied" && arrayIndex !== null ? (
                    <span style={{ 
                      backgroundColor: "#e3f2fd", 
                      padding: "2px 4px", 
                      borderRadius: "3px",
                      color: "#1976d2"
                    }}>
                      [{arrayIndex}]
                    </span>
                  ) : entry.status === "deleted" ? (
                    <span style={{ color: "#999" }}>(—É–¥–∞–ª–µ–Ω)</span>
                  ) : (
                    "‚Äî"
                  )}
                </td>
                <td>
                  {entry.value && entry.status === "occupied"
                    ? entry.value.fullName
                    : entry.status === "deleted"
                    ? "(–¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã)"
                    : "‚Äî"}
                </td>
                <td>
                  {entry.value && entry.status === "occupied"
                    ? entry.value.address
                    : entry.status === "deleted"
                    ? "(–¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã)"
                    : "‚Äî"}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ */}
      <div
        style={{
          borderTop: "1px solid #ccc",
          backgroundColor: "#f9f9f9",
          fontSize: "11px",
          padding: "8px 12px",
          color: "#666",
        }}
      >
        <div style={{ marginBottom: "4px" }}>
          <strong>–ê–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> –ú–µ—Ç–æ–¥ —Å–µ—Ä–µ–¥–∏–Ω–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
        </div>
        <div style={{ marginBottom: "4px" }}>
          <strong>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–ª–ª–∏–∑–∏–π:</strong> –õ–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–±–∏–Ω–≥ —Å —à–∞–≥–æ–º h_i(k) = (h(k) + i √ó k) mod m
        </div>
        <div style={{ marginBottom: "4px" }}>
          <strong>–õ–µ–Ω–∏–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ:</strong> –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ tombstone (—Å—Ç–∞—Ç—É—Å "–£–¥–∞–ª–µ–Ω–æ")
        </div>
        <div style={{ marginBottom: "4px" }}>
          <strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> 
          <span style={{ color: "#1976d2", marginLeft: "8px" }}>–ò–Ω–¥–µ–∫—Å –•–¢</span> ‚Üí 
          <span style={{ color: "#4caf50", marginLeft: "4px" }}>–ö–ª—é—á (—Ç–µ–ª–µ—Ñ–æ–Ω)</span> ‚Üí 
          <span style={{ color: "#ff9800", marginLeft: "4px" }}>–•–µ—à-–∑–Ω–∞—á–µ–Ω–∏–µ</span> ‚Üí 
          <span style={{ color: "#1976d2", marginLeft: "4px" }}>[–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞]</span> ‚Üí 
          <span style={{ color: "#666", marginLeft: "4px" }}>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</span>
        </div>
        <div>
          <strong>–°–≤—è–∑—å –¥–∞–Ω–Ω—ã—Ö:</strong> –•–µ—à-—Ç–∞–±–ª–∏—Ü–∞ —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å—ã, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–§–ò–û + –∞–¥—Ä–µ—Å) –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ
        </div>
      </div>
    </div>
  );
};

export default HashTableStructureView;