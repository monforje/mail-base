// src/renderer/src/components/UsersSection/UsersArrayView.tsx
import React, { useState } from "react";
import { User } from "../../types";
import { usersService } from "../../DataServices";
import "../../assets/ArrayView.css";

interface UsersArrayViewProps {
  users: User[];
}

const UsersArrayView: React.FC<UsersArrayViewProps> = ({ users }) => {
  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã
  const isInitialized = usersService.isInitialized();

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ (–≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ)
  const getArrayElements = () => {
    if (!isInitialized || users.length === 0) {
      return [];
    }

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    const elements: Array<{
      index: number;
      user: User | null;
      isEmpty: boolean;
    }> = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏—Ö –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤ –º–∞—Å—Å–∏–≤–µ
    users.forEach((user, index) => {
      elements.push({
        index,
        user,
        isEmpty: false,
      });
    });

    return elements;
  };

  const arrayElements = getArrayElements();

  const handleMouseEnter = (index: number) => {
    setHoveredIndex(index);
  };

  const handleMouseLeave = () => {
    setHoveredIndex(null);
  };

  const formatTooltipContent = (user: User) => {
    return `–§–ò–û: ${user.fullName}\n–ê–¥—Ä–µ—Å: ${user.address}`;
  };

  if (!isInitialized) {
    return (
      <div className="array-view">
        <div className="array-empty-state">
          <div className="array-empty-icon">üì¶</div>
          <div className="array-empty-text">–ú–∞—Å—Å–∏–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω</div>
          <div className="array-empty-subtext">
            –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö
          </div>
        </div>
      </div>
    );
  }

  if (arrayElements.length === 0) {
    return (
      <div className="array-view">
        <div className="array-empty-state">
          <div className="array-empty-icon">üì¶</div>
          <div className="array-empty-text">–ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç</div>
          <div className="array-empty-subtext">
            –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="array-view">
      <div className="array-container">
        {/* –≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ */}
        <div className="array-elements">
          {arrayElements.map((element) => (
            <div
              key={element.index}
              className={`array-element ${element.isEmpty ? "empty" : ""}`}
              onMouseEnter={() => handleMouseEnter(element.index)}
              onMouseLeave={handleMouseLeave}
            >
              {/* –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ */}
              <div className="element-index">[{element.index}]</div>

              {element.isEmpty ? (
                <div className="element-empty">–ü—É—Å—Ç–æ</div>
              ) : element.user ? (
                <>
                  {/* –ö–ª—é—á (—Ç–µ–ª–µ—Ñ–æ–Ω) */}
                  <div className="element-key">
                    {element.user.phone.toString()}
                  </div>

                  {/* Tooltip —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
                  {hoveredIndex === element.index && (
                    <div className="array-tooltip">
                      {formatTooltipContent(element.user)}
                    </div>
                  )}
                </>
              ) : (
                <div className="element-empty">–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö</div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default UsersArrayView;
