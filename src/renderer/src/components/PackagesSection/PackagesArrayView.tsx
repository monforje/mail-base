// src/renderer/src/components/PackagesSection/PackagesArrayView.tsx
import React, { useState } from "react";
import { Package } from "../../types";
import "../../assets/ArrayView.css";

interface PackagesArrayViewProps {
  packages: Package[];
}

const PackagesArrayView: React.FC<PackagesArrayViewProps> = ({ packages }) => {
  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ (–≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ)
  const getArrayElements = () => {
    if (packages.length === 0) {
      return [];
    }

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    const elements: Array<{
      index: number;
      package: Package | null;
      isEmpty: boolean;
    }> = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ—Å—ã–ª–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏—Ö –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤ –º–∞—Å—Å–∏–≤–µ
    packages.forEach((pkg, index) => {
      elements.push({
        index,
        package: pkg,
        isEmpty: false,
      });
    });

    return elements;
  };

  const arrayElements = getArrayElements();

  const handleMouseEnter = (index: number) => {
    setHoveredIndex(index);
  };

  const handleMouseLeave = () => {
    setHoveredIndex(null);
  };

  const formatTooltipContent = (pkg: Package) => {
    return `–¢–µ–ª–µ—Ñ–æ–Ω: ${pkg.senderPhone.toString()}\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${pkg.receiverPhone.toString()}\n–í–µ—Å: ${
      pkg.weight
    } –∫–≥\n–î–∞—Ç–∞: ${pkg.date}`;
  };

  const getElementKey = (pkg: Package) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∫–∞–∫ –∫–ª—é—á, —Ç.–∫. –ø–æ –Ω–µ–º—É –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è –¥–µ—Ä–µ–≤–æ
    return pkg.senderPhone.toString();
  };

  if (arrayElements.length === 0) {
    console.log("Current hoveredIndex:", hoveredIndex); // –û—Ç–ª–∞–¥–∫–∞

    return (
      <div className="array-view">
        <div className="array-empty-state">
          <div className="array-empty-icon">üì¶</div>
          <div className="array-empty-text">–ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç</div>
          <div className="array-empty-subtext">
            –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="array-view">
      {/* –≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ */}
      <div className="array-elements">
        {arrayElements.map((element) => (
          <div
            key={element.index}
            className={`array-element ${element.isEmpty ? "empty" : ""}`}
            onMouseEnter={() => handleMouseEnter(element.index)}
            onMouseLeave={handleMouseLeave}
          >
            {/* –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ */}
            <div className="element-index">[{element.index}]</div>

            {element.isEmpty ? (
              <div className="element-empty">–ü—É—Å—Ç–æ</div>
            ) : element.package ? (
              <>
                {/* –ö–ª—é—á (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–≤—è–∑–∏ —Å –¥–µ—Ä–µ–≤–æ–º */}
                <div className="element-key">
                  {getElementKey(element.package)}
                </div>

                {/* Tooltip —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
                {hoveredIndex === element.index && (
                  <div className="array-tooltip">
                    {formatTooltipContent(element.package)}
                  </div>
                )}
              </>
            ) : (
              <div className="element-empty">–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö</div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default PackagesArrayView;
