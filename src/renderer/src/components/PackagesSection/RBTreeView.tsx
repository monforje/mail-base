import { Package } from "../../types";
import { packagesService } from "../../DataServices";
import RBTreeCanvas, { convertRBTreeToVisualTree } from "./RBTreeCanvas";
import React, { useMemo, useState, useEffect } from "react";
import { DoublyLinkedList } from "../../data-structures/DoublyLinkedList";

interface RBTreeViewProps {
  packages: Package[];
  onDataChange?: () => void;
}

const RBTreeView: React.FC<RBTreeViewProps> = ({ packages, onDataChange }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–æ–¥—ã
  const [selectedKey, setSelectedKey] = useState<string | null>(null);
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const treeData = useMemo(() => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –¥–µ—Ä–µ–≤–æ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
      const tree = (packagesService as any).redBlackTree;
      
      if (!tree || packages.length === 0) {
        return null;
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —É–∑–ª–æ–≤
      return convertRBTreeToVisualTree(tree, (key, value) => {
        // key - —ç—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        // value - —ç—Ç–æ DoublyLinkedList —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –ø–æ—Å—ã–ª–æ–∫
        const indices = value ? (value as DoublyLinkedList<any>).toArray() : [];
        return `${key}\n[${indices.join(", ")}]`;
      });
    } catch (error) {
      console.error('Error converting tree data:', error);
      return null;
    }
  }, [packages]);

  const stats = packagesService.getTreeStatistics();

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (selectedKey)
  const selectedPackages = useMemo(() => {
    if (!selectedKey) return [];
    const senderPhone = parseInt(selectedKey.split('\n')[0], 10);
    if (isNaN(senderPhone)) return [];
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏–∑ value (DoublyLinkedList) –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥–µ—Ä–µ–≤–∞
    const tree = (packagesService as any).redBlackTree;
    if (!tree) return [];
    const node = tree.search(senderPhone.toString());
    if (!node) return [];
    const indices = node.toArray();
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—ã–ª–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    const arr = (packagesService as any).packagesArray;
    return indices.map((idx: number) => {
      const data = arr.get(idx);
      if (!data) return null;
      return {
        senderPhone,
        receiverPhone: parseInt(data.receiverPhone, 10),
        weight: data.weight,
        date: data.date,
      };
    }).filter(Boolean);
  }, [selectedKey, packages]);

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—ã–ª–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ Delete
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Delete' && selectedKey) {
        const senderPhone = parseInt(selectedKey.split('\n')[0], 10);
        if (!isNaN(senderPhone)) {
          if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ${senderPhone}?`)) {
            (packagesService as any).removeAllPackagesBySender(senderPhone);
            setSelectedKey(null);
            if (onDataChange) onDataChange();
          }
        }
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [selectedKey, onDataChange]);

  return (
    <div style={{
      height: "100%",
      display: "flex",
      flexDirection: "column",
      overflow: "hidden"
    }}>
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      <div style={{
        padding: "12px",
        backgroundColor: "#f9f9f9",
        borderBottom: "1px solid #ddd",
        fontSize: "12px",
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
        flexShrink: 0
      }}>
        <div style={{ display: "flex", gap: "20px" }}>
          <span style={{ color: "#4caf50" }}>
            üì¶ –í—Å–µ–≥–æ –ø–æ—Å—ã–ª–æ–∫: {stats.size}
          </span>
          <span style={{ color: "#2196f3" }}>
            üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {stats.uniqueSenders}
          </span>
          <span style={{ color: "#ff9800" }}>
            üìè –í—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞: {stats.height}
          </span>
          <span style={{ color: "#9c27b0" }}>
            ‚ö´ –ß–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞: {stats.blackHeight}
          </span>
        </div>
        <div style={{ display: "flex", gap: "15px" }}>
          <span style={{ 
            color: stats.isValid ? "#4caf50" : "#f44336",
            fontWeight: "bold"
          }}>
            {stats.isValid ? "‚úì –î–µ—Ä–µ–≤–æ –≤–∞–ª–∏–¥–Ω–æ–µ" : "‚úó –î–µ—Ä–µ–≤–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ"}
          </span>
          <span style={{ color: "#666" }}>
            üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(stats.efficiency * 100).toFixed(1)}%
          </span>
        </div>
      </div>

      {/* –õ–µ–≥–µ–Ω–¥–∞ */}
      <div style={{
        padding: "8px 12px",
        backgroundColor: "#fafafa",
        borderBottom: "1px solid #eee",
        fontSize: "11px",
        display: "flex",
        gap: "20px",
        alignItems: "center",
        flexShrink: 0
      }}>
        <span style={{ color: "#333", fontWeight: "bold" }}>–õ–µ–≥–µ–Ω–¥–∞:</span>
        <div style={{ display: "flex", alignItems: "center", gap: "4px" }}>
          <div style={{
            width: "16px",
            height: "16px",
            borderRadius: "50%",
            backgroundColor: "#ff4444",
            border: "1px solid #222"
          }}></div>
          <span>–ö—Ä–∞—Å–Ω—ã–π —É–∑–µ–ª</span>
        </div>
        <div style={{ display: "flex", alignItems: "center", gap: "4px" }}>
          <div style={{
            width: "16px",
            height: "16px",
            borderRadius: "50%",
            backgroundColor: "#333333",
            border: "1px solid #222"
          }}></div>
          <span>–ß–µ—Ä–Ω—ã–π —É–∑–µ–ª</span>
        </div>
        <div style={{ display: "flex", alignItems: "center", gap: "4px" }}>
          <div style={{
            width: "16px",
            height: "16px",
            borderRadius: "50%",
            backgroundColor: "#2196f3",
            border: "1px solid #1976d2"
          }}></div>
          <span>–í—ã–±—Ä–∞–Ω–Ω—ã–π —É–∑–µ–ª</span>
        </div>
        <span style={{ marginLeft: "20px", color: "#666" }}>
          –ù–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ —É–∑–µ–ª –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        </span>
      </div>

      {/* –ö–∞–Ω–≤–∞—Å —Å –¥–µ—Ä–µ–≤–æ–º */}
      <div style={{
        flex: 1,
        padding: "20px",
        overflow: "auto",
        display: "flex",
        justifyContent: "center",
        alignItems: "flex-start"
      }}>
        <RBTreeCanvas
          treeData={treeData}
          width={Math.max(800, window.innerWidth - 100)}
          height={Math.max(600, window.innerHeight - 200)}
          selectedKey={selectedKey}
          onNodeClick={setSelectedKey}
        />
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤–Ω–∏–∑—É */}
      <div style={{
        padding: "8px 12px",
        backgroundColor: "#f0f0f0",
        borderTop: "1px solid #ddd",
        fontSize: "11px",
        color: "#666",
        flexShrink: 0
      }}>
        <div style={{ display: "flex", justifyContent: "space-between" }}>
          <span>
            <strong>–°—Ç—Ä—É–∫—Ç—É—Ä–∞:</strong> –ö–ª—é—á = —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –ó–Ω–∞—á–µ–Ω–∏–µ = —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫
          </span>
          <span>
            <strong>–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞:</strong> –ö—Ä–∞—Å–Ω–æ-—á–µ—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é –≤—ã—Å–æ—Ç—É
          </span>
        </div>
      </div>

      {selectedKey && (
        <div style={{
          padding: "12px",
          backgroundColor: "#e3f2fd",
          borderTop: "1px solid #bbdefb",
          fontSize: "12px",
          color: "#1565c0"
        }}>
          <strong>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é: {selectedKey.split('\n')[0]}</strong>
          <table style={{ width: "100%", marginTop: 8, background: "white", borderCollapse: "collapse" }}>
            <thead>
              <tr>
                <th>–¢–µ–ª. –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</th>
                <th>–¢–µ–ª. –ø–æ–ª—É—á–∞—Ç–µ–ª—è</th>
                <th>–í–µ—Å (–∫–≥)</th>
                <th>–î–∞—Ç–∞</th>
              </tr>
            </thead>
            <tbody>
              {selectedPackages.length === 0 ? (
                <tr><td colSpan={4} style={{ textAlign: 'center', color: '#888' }}>–ù–µ—Ç –ø–æ—Å—ã–ª–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é</td></tr>
              ) : (
                selectedPackages.map((pkg: any, idx: number) => (
                  <tr key={idx}>
                    <td>{pkg.senderPhone}</td>
                    <td>{pkg.receiverPhone}</td>
                    <td>{pkg.weight}</td>
                    <td>{pkg.date}</td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default RBTreeView;